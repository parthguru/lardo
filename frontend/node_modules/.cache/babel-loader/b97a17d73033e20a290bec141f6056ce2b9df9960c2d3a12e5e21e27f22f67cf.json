{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useTranslation } from 'react-i18next';\nconst STRAPI_BASE_URL = process.env.REACT_APP_STRAPI_URL || 'http://localhost:1337';\nclass StrapiApiService {\n  constructor() {\n    this.baseUrl = void 0;\n    this.baseUrl = STRAPI_BASE_URL;\n  }\n  async fetchFromStrapi(endpoint, params = {}) {\n    const searchParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        if (typeof value === 'object') {\n          searchParams.append(key, JSON.stringify(value));\n        } else {\n          searchParams.append(key, value.toString());\n        }\n      }\n    });\n    const url = `${this.baseUrl}/api/${endpoint}${searchParams.toString() ? `?${searchParams.toString()}` : ''}`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Strapi API Error:', error);\n      throw error;\n    }\n  }\n  async getArticles(params = {}) {\n    const {\n      locale = 'en',\n      search,\n      category,\n      featured,\n      page = 1,\n      pageSize = 10,\n      sort = 'publishDate:desc'\n    } = params;\n    const filters = {\n      // No date filtering - show all articles regardless of publish status\n      // You can add publishDate filtering later if needed\n    };\n    if (search) {\n      filters.$or = [{\n        title: {\n          $containsi: search\n        }\n      }, {\n        content: {\n          $containsi: search\n        }\n      }, {\n        excerpt: {\n          $containsi: search\n        }\n      }];\n    }\n    if (category && category !== 'all') {\n      filters.category = {\n        slug: {\n          $eq: category\n        }\n      };\n    }\n    if (featured !== undefined) {\n      filters.featured = {\n        $eq: featured\n      };\n    }\n    const queryParams = {\n      locale,\n      filters,\n      sort,\n      // status: 'published', // Temporarily show all articles including drafts\n      populate: {\n        category: true,\n        author: true,\n        tags: true,\n        localizations: true\n      },\n      pagination: {\n        page,\n        pageSize\n      }\n    };\n    try {\n      const response = await this.fetchFromStrapi('articles', queryParams);\n      console.log('Strapi API Response:', response); // DEBUG\n\n      // Handle Strapi v5 direct array response format\n      let articles;\n      let pagination = {\n        total: 0,\n        page: 1,\n        pageSize: 10\n      };\n      if (Array.isArray(response)) {\n        // Direct array response (your current format)\n        articles = response.map(article => this.transformSimpleArticle(article));\n        pagination = {\n          total: response.length,\n          page: 1,\n          pageSize: response.length\n        };\n      } else if (response.data && Array.isArray(response.data)) {\n        var _response$meta;\n        // Strapi v5 standard format with data array\n        articles = response.data.map(article => this.transformSimpleArticle(article));\n        pagination = ((_response$meta = response.meta) === null || _response$meta === void 0 ? void 0 : _response$meta.pagination) || pagination;\n      } else {\n        // Fallback\n        articles = [];\n      }\n      console.log('Transformed articles:', articles); // DEBUG\n\n      return {\n        articles,\n        total: pagination.total,\n        page: pagination.page,\n        pageSize: pagination.pageSize\n      };\n    } catch (error) {\n      console.error('Error fetching articles:', error);\n      return {\n        articles: [],\n        total: 0,\n        page: 1,\n        pageSize: 10\n      };\n    }\n  }\n  async getArticleBySlug(slug, locale = 'en') {\n    try {\n      const queryParams = {\n        locale,\n        filters: {\n          slug: {\n            $eq: slug\n          }\n          // No date filtering for individual articles\n        },\n        populate: {\n          category: true,\n          author: true,\n          tags: true,\n          localizations: true\n        }\n      };\n      const response = await this.fetchFromStrapi('articles', queryParams);\n      if (response.data && response.data.length > 0) {\n        return this.transformArticle(response.data[0]);\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching article by slug:', error);\n      return null;\n    }\n  }\n  async getCategories(locale = 'en') {\n    try {\n      const queryParams = {\n        locale,\n        filters: {\n          // Removed publishedAt filter to fix 500 error\n        },\n        sort: 'displayOrder:asc'\n      };\n      const response = await this.fetchFromStrapi('categories', queryParams);\n      const categories = response.data.map(category => ({\n        key: category.attributes.slug,\n        label: category.attributes.name,\n        color: category.attributes.color,\n        icon: category.attributes.icon\n      }));\n\n      // Add \"all\" category at the beginning\n      return [{\n        key: 'all',\n        label: 'All Categories',\n        color: '#666',\n        icon: 'ðŸ“š'\n      }, ...categories];\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      return [{\n        key: 'all',\n        label: 'All Categories',\n        color: '#666',\n        icon: 'ðŸ“š'\n      }];\n    }\n  }\n  async getFeaturedArticles(locale = 'en', limit = 5) {\n    const result = await this.getArticles({\n      locale,\n      featured: true,\n      pageSize: limit,\n      sort: 'publishDate:desc'\n    });\n    return result.articles;\n  }\n  transformArticle(strapiArticle) {\n    var _attributes$category, _attributes$category$, _attributes$category$2, _attributes$author, _attributes$author$da, _attributes$author$da2, _attributes$tags, _attributes$tags$data;\n    const {\n      attributes\n    } = strapiArticle;\n    return {\n      id: strapiArticle.id.toString(),\n      category: ((_attributes$category = attributes.category) === null || _attributes$category === void 0 ? void 0 : (_attributes$category$ = _attributes$category.data) === null || _attributes$category$ === void 0 ? void 0 : (_attributes$category$2 = _attributes$category$.attributes) === null || _attributes$category$2 === void 0 ? void 0 : _attributes$category$2.name) || 'Uncategorized',\n      title: attributes.title,\n      preview: attributes.excerpt,\n      content: attributes.content,\n      readingTime: attributes.readingTime,\n      publishDate: attributes.publishDate,\n      author: (_attributes$author = attributes.author) === null || _attributes$author === void 0 ? void 0 : (_attributes$author$da = _attributes$author.data) === null || _attributes$author$da === void 0 ? void 0 : (_attributes$author$da2 = _attributes$author$da.attributes) === null || _attributes$author$da2 === void 0 ? void 0 : _attributes$author$da2.name,\n      tags: ((_attributes$tags = attributes.tags) === null || _attributes$tags === void 0 ? void 0 : (_attributes$tags$data = _attributes$tags.data) === null || _attributes$tags$data === void 0 ? void 0 : _attributes$tags$data.map(tag => tag.attributes.name)) || [],\n      seo: {\n        title: attributes.seoTitle,\n        description: attributes.seoDescription,\n        keywords: attributes.seoKeywords\n      }\n    };\n  }\n  transformSimpleArticle(article) {\n    return {\n      id: article.id.toString(),\n      category: article.category || 'Uncategorized',\n      title: article.title,\n      preview: article.excerpt,\n      content: article.content,\n      readingTime: article.readingTime || 1,\n      publishDate: article.publishDate,\n      author: article.author,\n      tags: article.tags || [],\n      seo: {\n        title: article.seoTitle,\n        description: article.seoDescription,\n        keywords: article.seoKeywords\n      }\n    };\n  }\n}\n\n// Create a singleton instance\nexport const strapiApi = new StrapiApiService();\n\n// Hook for using Strapi API with current locale\nexport const useStrapiApi = () => {\n  _s();\n  const {\n    i18n\n  } = useTranslation();\n  const currentLocale = i18n.language === 'es' ? 'es' : 'en';\n  return {\n    getArticles: (params = {}) => strapiApi.getArticles({\n      ...params,\n      locale: currentLocale\n    }),\n    getArticleBySlug: slug => strapiApi.getArticleBySlug(slug, currentLocale),\n    getCategories: () => strapiApi.getCategories(currentLocale),\n    getFeaturedArticles: limit => strapiApi.getFeaturedArticles(currentLocale, limit)\n  };\n};\n_s(useStrapiApi, \"iD7vDB/EPQWin5ATG71yacngHuk=\", false, function () {\n  return [useTranslation];\n});","map":{"version":3,"names":["useTranslation","STRAPI_BASE_URL","process","env","REACT_APP_STRAPI_URL","StrapiApiService","constructor","baseUrl","fetchFromStrapi","endpoint","params","searchParams","URLSearchParams","Object","entries","forEach","key","value","undefined","append","JSON","stringify","toString","url","response","fetch","ok","Error","status","json","error","console","getArticles","locale","search","category","featured","page","pageSize","sort","filters","$or","title","$containsi","content","excerpt","slug","$eq","queryParams","populate","author","tags","localizations","pagination","log","articles","total","Array","isArray","map","article","transformSimpleArticle","length","data","_response$meta","meta","getArticleBySlug","transformArticle","getCategories","categories","attributes","label","name","color","icon","getFeaturedArticles","limit","result","strapiArticle","_attributes$category","_attributes$category$","_attributes$category$2","_attributes$author","_attributes$author$da","_attributes$author$da2","_attributes$tags","_attributes$tags$data","id","preview","readingTime","publishDate","tag","seo","seoTitle","description","seoDescription","keywords","seoKeywords","strapiApi","useStrapiApi","_s","i18n","currentLocale","language"],"sources":["/Users/Parth/Laredo Car accident/laredo-car-accident/frontend/src/services/strapiApi.ts"],"sourcesContent":["import { useTranslation } from 'react-i18next';\n\nconst STRAPI_BASE_URL = process.env.REACT_APP_STRAPI_URL || 'http://localhost:1337';\n\nexport interface StrapiArticle {\n  id: number;\n  attributes: {\n    title: string;\n    slug: string;\n    content: string;\n    excerpt: string;\n    readingTime: number;\n    featured: boolean;\n    publishDate: string;\n    category: {\n      data: {\n        id: number;\n        attributes: {\n          name: string;\n          slug: string;\n          color: string;\n          icon: string;\n        };\n      };\n    };\n    author: {\n      data: {\n        id: number;\n        attributes: {\n          name: string;\n          credentials: string;\n          specialty: string;\n          bio: string;\n        };\n      };\n    };\n    tags: {\n      data: Array<{\n        id: number;\n        attributes: {\n          name: string;\n          slug: string;\n        };\n      }>;\n    };\n    seoTitle?: string;\n    seoDescription?: string;\n    seoKeywords?: string;\n    locale: string;\n    localizations: {\n      data: Array<{\n        id: number;\n        attributes: {\n          locale: string;\n        };\n      }>;\n    };\n  };\n}\n\nexport interface StrapiCategory {\n  id: number;\n  attributes: {\n    name: string;\n    slug: string;\n    description?: string;\n    color: string;\n    icon: string;\n    displayOrder: number;\n    locale: string;\n  };\n}\n\nexport interface StrapiAuthor {\n  id: number;\n  attributes: {\n    name: string;\n    credentials: string;\n    specialty: string;\n    bio: string;\n    languages: string[];\n    locale: string;\n  };\n}\n\nexport interface BlogArticle {\n  id: string;\n  category: string;\n  title: string;\n  preview: string;\n  content: string;\n  readingTime: number;\n  publishDate: string;\n  author?: string;\n  tags?: string[];\n  seo?: {\n    title?: string;\n    description?: string;\n    keywords?: string;\n  };\n}\n\nclass StrapiApiService {\n  private baseUrl: string;\n\n  constructor() {\n    this.baseUrl = STRAPI_BASE_URL;\n  }\n\n  private async fetchFromStrapi(endpoint: string, params: Record<string, any> = {}) {\n    const searchParams = new URLSearchParams();\n    \n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        if (typeof value === 'object') {\n          searchParams.append(key, JSON.stringify(value));\n        } else {\n          searchParams.append(key, value.toString());\n        }\n      }\n    });\n\n    const url = `${this.baseUrl}/api/${endpoint}${searchParams.toString() ? `?${searchParams.toString()}` : ''}`;\n    \n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Strapi API Error:', error);\n      throw error;\n    }\n  }\n\n  async getArticles(params: {\n    locale?: string;\n    search?: string;\n    category?: string;\n    featured?: boolean;\n    page?: number;\n    pageSize?: number;\n    sort?: string;\n  } = {}): Promise<{ articles: BlogArticle[]; total: number; page: number; pageSize: number }> {\n    const {\n      locale = 'en',\n      search,\n      category,\n      featured,\n      page = 1,\n      pageSize = 10,\n      sort = 'publishDate:desc'\n    } = params;\n\n    const filters: any = {\n      // No date filtering - show all articles regardless of publish status\n      // You can add publishDate filtering later if needed\n    };\n\n    if (search) {\n      filters.$or = [\n        { title: { $containsi: search } },\n        { content: { $containsi: search } },\n        { excerpt: { $containsi: search } }\n      ];\n    }\n\n    if (category && category !== 'all') {\n      filters.category = {\n        slug: { $eq: category }\n      };\n    }\n\n    if (featured !== undefined) {\n      filters.featured = { $eq: featured };\n    }\n\n    const queryParams = {\n      locale,\n      filters,\n      sort,\n      // status: 'published', // Temporarily show all articles including drafts\n      populate: {\n        category: true,\n        author: true,\n        tags: true,\n        localizations: true\n      },\n      pagination: {\n        page,\n        pageSize\n      }\n    };\n\n    try {\n      const response = await this.fetchFromStrapi('articles', queryParams);\n      console.log('Strapi API Response:', response); // DEBUG\n      \n      // Handle Strapi v5 direct array response format\n      let articles: BlogArticle[];\n      let pagination = { total: 0, page: 1, pageSize: 10 };\n      \n      if (Array.isArray(response)) {\n        // Direct array response (your current format)\n        articles = response.map(article => this.transformSimpleArticle(article));\n        pagination = { total: response.length, page: 1, pageSize: response.length };\n      } else if (response.data && Array.isArray(response.data)) {\n        // Strapi v5 standard format with data array\n        articles = response.data.map(article => this.transformSimpleArticle(article));\n        pagination = response.meta?.pagination || pagination;\n      } else {\n        // Fallback\n        articles = [];\n      }\n      \n      console.log('Transformed articles:', articles); // DEBUG\n      \n      return {\n        articles,\n        total: pagination.total,\n        page: pagination.page,\n        pageSize: pagination.pageSize\n      };\n    } catch (error) {\n      console.error('Error fetching articles:', error);\n      return { articles: [], total: 0, page: 1, pageSize: 10 };\n    }\n  }\n\n  async getArticleBySlug(slug: string, locale: string = 'en'): Promise<BlogArticle | null> {\n    try {\n      const queryParams = {\n        locale,\n        filters: {\n          slug: { $eq: slug }\n          // No date filtering for individual articles\n        },\n        populate: {\n          category: true,\n          author: true,\n          tags: true,\n          localizations: true\n        }\n      };\n\n      const response = await this.fetchFromStrapi('articles', queryParams);\n      \n      if (response.data && response.data.length > 0) {\n        return this.transformArticle(response.data[0]);\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error fetching article by slug:', error);\n      return null;\n    }\n  }\n\n  async getCategories(locale: string = 'en'): Promise<{ key: string; label: string; color: string; icon: string }[]> {\n    try {\n      const queryParams = {\n        locale,\n        filters: {\n          // Removed publishedAt filter to fix 500 error\n        },\n        sort: 'displayOrder:asc'\n      };\n\n      const response = await this.fetchFromStrapi('categories', queryParams);\n      \n      const categories = response.data.map((category: StrapiCategory) => ({\n        key: category.attributes.slug,\n        label: category.attributes.name,\n        color: category.attributes.color,\n        icon: category.attributes.icon\n      }));\n\n      // Add \"all\" category at the beginning\n      return [\n        { key: 'all', label: 'All Categories', color: '#666', icon: 'ðŸ“š' },\n        ...categories\n      ];\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      return [{ key: 'all', label: 'All Categories', color: '#666', icon: 'ðŸ“š' }];\n    }\n  }\n\n  async getFeaturedArticles(locale: string = 'en', limit: number = 5): Promise<BlogArticle[]> {\n    const result = await this.getArticles({\n      locale,\n      featured: true,\n      pageSize: limit,\n      sort: 'publishDate:desc'\n    });\n    \n    return result.articles;\n  }\n\n  private transformArticle(strapiArticle: StrapiArticle): BlogArticle {\n    const { attributes } = strapiArticle;\n    \n    return {\n      id: strapiArticle.id.toString(),\n      category: attributes.category?.data?.attributes?.name || 'Uncategorized',\n      title: attributes.title,\n      preview: attributes.excerpt,\n      content: attributes.content,\n      readingTime: attributes.readingTime,\n      publishDate: attributes.publishDate,\n      author: attributes.author?.data?.attributes?.name,\n      tags: attributes.tags?.data?.map(tag => tag.attributes.name) || [],\n      seo: {\n        title: attributes.seoTitle,\n        description: attributes.seoDescription,\n        keywords: attributes.seoKeywords\n      }\n    };\n  }\n\n  private transformSimpleArticle(article: any): BlogArticle {\n    return {\n      id: article.id.toString(),\n      category: article.category || 'Uncategorized',\n      title: article.title,\n      preview: article.excerpt,\n      content: article.content,\n      readingTime: article.readingTime || 1,\n      publishDate: article.publishDate,\n      author: article.author,\n      tags: article.tags || [],\n      seo: {\n        title: article.seoTitle,\n        description: article.seoDescription,\n        keywords: article.seoKeywords\n      }\n    };\n  }\n}\n\n// Create a singleton instance\nexport const strapiApi = new StrapiApiService();\n\n// Hook for using Strapi API with current locale\nexport const useStrapiApi = () => {\n  const { i18n } = useTranslation();\n  const currentLocale = i18n.language === 'es' ? 'es' : 'en';\n\n  return {\n    getArticles: (params = {}) => strapiApi.getArticles({ ...params, locale: currentLocale }),\n    getArticleBySlug: (slug: string) => strapiApi.getArticleBySlug(slug, currentLocale),\n    getCategories: () => strapiApi.getCategories(currentLocale),\n    getFeaturedArticles: (limit?: number) => strapiApi.getFeaturedArticles(currentLocale, limit),\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}