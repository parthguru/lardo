{"ast":null,"code":"var _jsxFileName = \"/Users/Parth/Laredo Car accident/laredo-car-accident/frontend/src/components/seo/StructuredData.tsx\";\nimport React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StructuredData = ({\n  type,\n  data\n}) => {\n  const generateLocalBusinessSchema = businessData => ({\n    '@context': 'https://schema.org',\n    '@type': 'MedicalBusiness',\n    name: businessData.name,\n    description: businessData.description,\n    url: businessData.url,\n    telephone: businessData.telephone,\n    address: {\n      '@type': 'PostalAddress',\n      streetAddress: businessData.address.streetAddress,\n      addressLocality: businessData.address.addressLocality,\n      addressRegion: businessData.address.addressRegion,\n      postalCode: businessData.address.postalCode,\n      addressCountry: businessData.address.addressCountry\n    },\n    geo: {\n      '@type': 'GeoCoordinates',\n      latitude: businessData.geo.latitude,\n      longitude: businessData.geo.longitude\n    },\n    openingHours: businessData.openingHours,\n    paymentAccepted: businessData.paymentAccepted,\n    currenciesAccepted: businessData.currenciesAccepted,\n    availableLanguage: businessData.availableLanguage,\n    medicalSpecialty: businessData.medicalSpecialty,\n    serviceArea: {\n      '@type': 'GeoCircle',\n      geoMidpoint: {\n        '@type': 'GeoCoordinates',\n        latitude: businessData.geo.latitude,\n        longitude: businessData.geo.longitude\n      },\n      geoRadius: businessData.serviceArea.geoRadius\n    },\n    hasMap: `https://maps.google.com/?q=${businessData.geo.latitude},${businessData.geo.longitude}`,\n    areaServed: [{\n      '@type': 'City',\n      name: 'Laredo',\n      '@id': 'https://en.wikipedia.org/wiki/Laredo,_Texas'\n    }, {\n      '@type': 'AdministrativeArea',\n      name: 'Webb County',\n      '@id': 'https://en.wikipedia.org/wiki/Webb_County,_Texas'\n    }],\n    aggregateRating: {\n      '@type': 'AggregateRating',\n      ratingValue: '4.8',\n      reviewCount: '127',\n      bestRating: '5',\n      worstRating: '1'\n    },\n    priceRange: '$$'\n  });\n  const generateMedicalProcedureSchema = procedureData => ({\n    '@context': 'https://schema.org',\n    '@type': 'MedicalProcedure',\n    name: procedureData.name,\n    description: procedureData.description,\n    procedureType: procedureData.procedureType,\n    bodyLocation: procedureData.bodyLocation,\n    preparation: procedureData.preparation,\n    howPerformed: procedureData.howPerformed,\n    followup: procedureData.recovery,\n    medicationClass: 'Non-invasive treatment',\n    status: 'Available'\n  });\n  const generatePhysicianSchema = physicianData => ({\n    '@context': 'https://schema.org',\n    '@type': 'Physician',\n    name: physicianData.name,\n    medicalSpecialty: physicianData.medicalSpecialty,\n    availableLanguage: physicianData.availableLanguage,\n    hospitalAffiliation: {\n      '@type': 'MedicalBusiness',\n      name: 'Laredo Car Accident Medical Center'\n    },\n    availableService: physicianData.availableService.map(service => ({\n      '@type': 'MedicalTherapy',\n      name: service.name,\n      description: service.description\n    })),\n    yearsExperience: physicianData.yearsExperience,\n    educationalCredentialAwarded: physicianData.education\n  });\n  const generateFAQSchema = faqData => ({\n    '@context': 'https://schema.org',\n    '@type': 'FAQPage',\n    mainEntity: faqData.map(faq => ({\n      '@type': 'Question',\n      name: faq.question,\n      acceptedAnswer: {\n        '@type': 'Answer',\n        text: faq.answer\n      }\n    }))\n  });\n  const generateArticleSchema = articleData => {\n    var _articleData$author, _articleData$featured, _articleData$localKey;\n    return {\n      '@context': 'https://schema.org',\n      '@type': 'MedicalWebPage',\n      headline: articleData.title,\n      description: articleData.excerpt,\n      url: `${window.location.origin}/blog/${articleData.slug}`,\n      datePublished: articleData.publishDate,\n      dateModified: articleData.lastReviewed || articleData.publishDate,\n      author: {\n        '@type': 'Person',\n        name: ((_articleData$author = articleData.author) === null || _articleData$author === void 0 ? void 0 : _articleData$author.name) || 'Laredo Car Accident Medical Center'\n      },\n      publisher: {\n        '@type': 'MedicalBusiness',\n        name: 'Laredo Car Accident Medical Center',\n        url: window.location.origin\n      },\n      mainEntityOfPage: {\n        '@type': 'WebPage',\n        '@id': `${window.location.origin}/blog/${articleData.slug}`\n      },\n      image: (_articleData$featured = articleData.featuredImage) === null || _articleData$featured === void 0 ? void 0 : _articleData$featured.url,\n      wordCount: articleData.wordCount,\n      keywords: [articleData.focusKeyword, ...(((_articleData$localKey = articleData.localKeywords) === null || _articleData$localKey === void 0 ? void 0 : _articleData$localKey.split(',')) || [])],\n      about: {\n        '@type': 'MedicalCondition',\n        name: 'Car Accident Injuries'\n      },\n      audience: {\n        '@type': 'PeopleAudience',\n        geographicArea: {\n          '@type': 'City',\n          name: 'Laredo, Texas'\n        }\n      },\n      inLanguage: 'en-US'\n    };\n  };\n  const getSchema = () => {\n    switch (type) {\n      case 'localBusiness':\n        return generateLocalBusinessSchema(data);\n      case 'medicalProcedure':\n        return generateMedicalProcedureSchema(data);\n      case 'physician':\n        return generatePhysicianSchema(data);\n      case 'faq':\n        return generateFAQSchema(data);\n      case 'article':\n        return generateArticleSchema(data);\n      default:\n        return null;\n    }\n  };\n  const schema = getSchema();\n  if (!schema) return null;\n  return /*#__PURE__*/_jsxDEV(Helmet, {\n    children: /*#__PURE__*/_jsxDEV(\"script\", {\n      type: \"application/ld+json\",\n      children: JSON.stringify(schema)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_c = StructuredData;\nexport default StructuredData;\nvar _c;\n$RefreshReg$(_c, \"StructuredData\");","map":{"version":3,"names":["React","Helmet","jsxDEV","_jsxDEV","StructuredData","type","data","generateLocalBusinessSchema","businessData","name","description","url","telephone","address","streetAddress","addressLocality","addressRegion","postalCode","addressCountry","geo","latitude","longitude","openingHours","paymentAccepted","currenciesAccepted","availableLanguage","medicalSpecialty","serviceArea","geoMidpoint","geoRadius","hasMap","areaServed","aggregateRating","ratingValue","reviewCount","bestRating","worstRating","priceRange","generateMedicalProcedureSchema","procedureData","procedureType","bodyLocation","preparation","howPerformed","followup","recovery","medicationClass","status","generatePhysicianSchema","physicianData","hospitalAffiliation","availableService","map","service","yearsExperience","educationalCredentialAwarded","education","generateFAQSchema","faqData","mainEntity","faq","question","acceptedAnswer","text","answer","generateArticleSchema","articleData","_articleData$author","_articleData$featured","_articleData$localKey","headline","title","excerpt","window","location","origin","slug","datePublished","publishDate","dateModified","lastReviewed","author","publisher","mainEntityOfPage","image","featuredImage","wordCount","keywords","focusKeyword","localKeywords","split","about","audience","geographicArea","inLanguage","getSchema","schema","children","JSON","stringify","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Parth/Laredo Car accident/laredo-car-accident/frontend/src/components/seo/StructuredData.tsx"],"sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet-async';\n\ninterface LocalBusinessData {\n  name: string;\n  description: string;\n  url: string;\n  telephone: string;\n  address: {\n    streetAddress: string;\n    addressLocality: string;\n    addressRegion: string;\n    postalCode: string;\n    addressCountry: string;\n  };\n  geo: {\n    latitude: string;\n    longitude: string;\n  };\n  openingHours: string[];\n  paymentAccepted: string[];\n  currenciesAccepted: string;\n  availableLanguage: string[];\n  medicalSpecialty: string[];\n  serviceArea: {\n    geoRadius: string;\n  };\n}\n\ninterface MedicalProcedureData {\n  name: string;\n  description: string;\n  procedureType: string;\n  bodyLocation: string[];\n  preparation?: string;\n  howPerformed?: string;\n  recovery?: string;\n}\n\ninterface PhysicianData {\n  name: string;\n  medicalSpecialty: string[];\n  availableLanguage: string[];\n  availableService: Array<{\n    name: string;\n    description?: string;\n  }>;\n  yearsExperience?: number;\n  education?: string[];\n}\n\ninterface StructuredDataProps {\n  type: 'localBusiness' | 'medicalProcedure' | 'physician' | 'faq' | 'article';\n  data: any;\n}\n\nconst StructuredData: React.FC<StructuredDataProps> = ({ type, data }) => {\n  const generateLocalBusinessSchema = (businessData: LocalBusinessData) => ({\n    '@context': 'https://schema.org',\n    '@type': 'MedicalBusiness',\n    name: businessData.name,\n    description: businessData.description,\n    url: businessData.url,\n    telephone: businessData.telephone,\n    address: {\n      '@type': 'PostalAddress',\n      streetAddress: businessData.address.streetAddress,\n      addressLocality: businessData.address.addressLocality,\n      addressRegion: businessData.address.addressRegion,\n      postalCode: businessData.address.postalCode,\n      addressCountry: businessData.address.addressCountry,\n    },\n    geo: {\n      '@type': 'GeoCoordinates',\n      latitude: businessData.geo.latitude,\n      longitude: businessData.geo.longitude,\n    },\n    openingHours: businessData.openingHours,\n    paymentAccepted: businessData.paymentAccepted,\n    currenciesAccepted: businessData.currenciesAccepted,\n    availableLanguage: businessData.availableLanguage,\n    medicalSpecialty: businessData.medicalSpecialty,\n    serviceArea: {\n      '@type': 'GeoCircle',\n      geoMidpoint: {\n        '@type': 'GeoCoordinates',\n        latitude: businessData.geo.latitude,\n        longitude: businessData.geo.longitude,\n      },\n      geoRadius: businessData.serviceArea.geoRadius,\n    },\n    hasMap: `https://maps.google.com/?q=${businessData.geo.latitude},${businessData.geo.longitude}`,\n    areaServed: [\n      {\n        '@type': 'City',\n        name: 'Laredo',\n        '@id': 'https://en.wikipedia.org/wiki/Laredo,_Texas',\n      },\n      {\n        '@type': 'AdministrativeArea',\n        name: 'Webb County',\n        '@id': 'https://en.wikipedia.org/wiki/Webb_County,_Texas',\n      },\n    ],\n    aggregateRating: {\n      '@type': 'AggregateRating',\n      ratingValue: '4.8',\n      reviewCount: '127',\n      bestRating: '5',\n      worstRating: '1',\n    },\n    priceRange: '$$',\n  });\n\n  const generateMedicalProcedureSchema = (procedureData: MedicalProcedureData) => ({\n    '@context': 'https://schema.org',\n    '@type': 'MedicalProcedure',\n    name: procedureData.name,\n    description: procedureData.description,\n    procedureType: procedureData.procedureType,\n    bodyLocation: procedureData.bodyLocation,\n    preparation: procedureData.preparation,\n    howPerformed: procedureData.howPerformed,\n    followup: procedureData.recovery,\n    medicationClass: 'Non-invasive treatment',\n    status: 'Available',\n  });\n\n  const generatePhysicianSchema = (physicianData: PhysicianData) => ({\n    '@context': 'https://schema.org',\n    '@type': 'Physician',\n    name: physicianData.name,\n    medicalSpecialty: physicianData.medicalSpecialty,\n    availableLanguage: physicianData.availableLanguage,\n    hospitalAffiliation: {\n      '@type': 'MedicalBusiness',\n      name: 'Laredo Car Accident Medical Center',\n    },\n    availableService: physicianData.availableService.map(service => ({\n      '@type': 'MedicalTherapy',\n      name: service.name,\n      description: service.description,\n    })),\n    yearsExperience: physicianData.yearsExperience,\n    educationalCredentialAwarded: physicianData.education,\n  });\n\n  const generateFAQSchema = (faqData: Array<{ question: string; answer: string }>) => ({\n    '@context': 'https://schema.org',\n    '@type': 'FAQPage',\n    mainEntity: faqData.map(faq => ({\n      '@type': 'Question',\n      name: faq.question,\n      acceptedAnswer: {\n        '@type': 'Answer',\n        text: faq.answer,\n      },\n    })),\n  });\n\n  const generateArticleSchema = (articleData: any) => ({\n    '@context': 'https://schema.org',\n    '@type': 'MedicalWebPage',\n    headline: articleData.title,\n    description: articleData.excerpt,\n    url: `${window.location.origin}/blog/${articleData.slug}`,\n    datePublished: articleData.publishDate,\n    dateModified: articleData.lastReviewed || articleData.publishDate,\n    author: {\n      '@type': 'Person',\n      name: articleData.author?.name || 'Laredo Car Accident Medical Center',\n    },\n    publisher: {\n      '@type': 'MedicalBusiness',\n      name: 'Laredo Car Accident Medical Center',\n      url: window.location.origin,\n    },\n    mainEntityOfPage: {\n      '@type': 'WebPage',\n      '@id': `${window.location.origin}/blog/${articleData.slug}`,\n    },\n    image: articleData.featuredImage?.url,\n    wordCount: articleData.wordCount,\n    keywords: [articleData.focusKeyword, ...(articleData.localKeywords?.split(',') || [])],\n    about: {\n      '@type': 'MedicalCondition',\n      name: 'Car Accident Injuries',\n    },\n    audience: {\n      '@type': 'PeopleAudience',\n      geographicArea: {\n        '@type': 'City',\n        name: 'Laredo, Texas',\n      },\n    },\n    inLanguage: 'en-US',\n  });\n\n  const getSchema = () => {\n    switch (type) {\n      case 'localBusiness':\n        return generateLocalBusinessSchema(data);\n      case 'medicalProcedure':\n        return generateMedicalProcedureSchema(data);\n      case 'physician':\n        return generatePhysicianSchema(data);\n      case 'faq':\n        return generateFAQSchema(data);\n      case 'article':\n        return generateArticleSchema(data);\n      default:\n        return null;\n    }\n  };\n\n  const schema = getSchema();\n\n  if (!schema) return null;\n\n  return (\n    <Helmet>\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schema)}\n      </script>\n    </Helmet>\n  );\n};\n\nexport default StructuredData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}