{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useStrapiApi } from './strapiApi';\nimport { fallbackArticles, fallbackCategories } from './fallbackData';\nexport const useBlogData = (options = {}) => {\n  _s();\n  const {\n    searchTerm = '',\n    categoryFilter = 'all',\n    page = 1,\n    pageSize = 5,\n    featured\n  } = options;\n  const [articles, setArticles] = useState([]);\n  const [categories, setCategories] = useState(fallbackCategories);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [total, setTotal] = useState(0);\n  const [useFallback, setUseFallback] = useState(false);\n  const strapiApi = useStrapiApi();\n  const loadData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Try to fetch from Strapi first\n      const [articlesResult, categoriesResult] = await Promise.all([strapiApi.getArticles({\n        search: searchTerm || undefined,\n        category: categoryFilter !== 'all' ? categoryFilter : undefined,\n        featured,\n        page,\n        pageSize\n      }).catch(err => {\n        console.warn('Articles API failed:', err);\n        return {\n          articles: [],\n          total: 0,\n          page: 1,\n          pageSize: 10\n        };\n      }), strapiApi.getCategories().catch(err => {\n        console.warn('Categories API failed:', err);\n        return fallbackCategories;\n      })]);\n      setArticles(articlesResult.articles);\n      setCategories(categoriesResult);\n      setTotal(articlesResult.total);\n      setUseFallback(false);\n    } catch (err) {\n      console.warn('Strapi API unavailable, using fallback data:', err);\n\n      // Use fallback data\n      setUseFallback(true);\n      let filteredArticles = [...fallbackArticles];\n\n      // Apply search filter\n      if (searchTerm) {\n        filteredArticles = filteredArticles.filter(article => article.title.toLowerCase().includes(searchTerm.toLowerCase()) || article.content.toLowerCase().includes(searchTerm.toLowerCase()) || article.preview.toLowerCase().includes(searchTerm.toLowerCase()));\n      }\n\n      // Apply category filter\n      if (categoryFilter !== 'all') {\n        filteredArticles = filteredArticles.filter(article => article.category.toLowerCase() === categoryFilter.toLowerCase());\n      }\n\n      // Apply featured filter\n      if (featured !== undefined) {\n        // For fallback data, treat first 3 articles as featured\n        if (featured) {\n          filteredArticles = filteredArticles.slice(0, 3);\n        }\n      }\n\n      // Sort by publish date (newest first)\n      filteredArticles.sort((a, b) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());\n\n      // Apply pagination\n      const startIndex = (page - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const paginatedArticles = filteredArticles.slice(startIndex, endIndex);\n      setArticles(paginatedArticles);\n      setCategories(fallbackCategories);\n      setTotal(filteredArticles.length);\n      setError('Using offline data - Strapi CMS unavailable');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    loadData();\n  }, [searchTerm, categoryFilter, page, pageSize, featured]);\n  const hasNextPage = page * pageSize < total;\n  return {\n    articles,\n    categories,\n    loading,\n    error,\n    total,\n    hasNextPage,\n    refresh: loadData\n  };\n};\n\n// Hook for getting a single article by ID\n_s(useBlogData, \"DVzQaNjNg/e1FjI0SqVh1o6VJ7s=\", false, function () {\n  return [useStrapiApi];\n});\nexport const useArticle = articleId => {\n  _s2();\n  const [article, setArticle] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const strapiApi = useStrapiApi();\n  useEffect(() => {\n    const loadArticle = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        // Try Strapi first\n        const strapiArticle = await strapiApi.getArticleBySlug(articleId);\n        if (strapiArticle) {\n          setArticle(strapiArticle);\n        } else {\n          // Fall back to local data\n          const fallbackArticle = fallbackArticles.find(a => a.id === articleId);\n          setArticle(fallbackArticle || null);\n        }\n      } catch (err) {\n        console.warn('Strapi API unavailable, using fallback data:', err);\n        const fallbackArticle = fallbackArticles.find(a => a.id === articleId);\n        setArticle(fallbackArticle || null);\n        setError('Using offline data - Strapi CMS unavailable');\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (articleId) {\n      loadArticle();\n    }\n  }, [articleId]);\n  return {\n    article,\n    loading,\n    error\n  };\n};\n_s2(useArticle, \"ZunZY78IK7oMZRgd/PEtiR825vs=\", false, function () {\n  return [useStrapiApi];\n});","map":{"version":3,"names":["useState","useEffect","useStrapiApi","fallbackArticles","fallbackCategories","useBlogData","options","_s","searchTerm","categoryFilter","page","pageSize","featured","articles","setArticles","categories","setCategories","loading","setLoading","error","setError","total","setTotal","useFallback","setUseFallback","strapiApi","loadData","articlesResult","categoriesResult","Promise","all","getArticles","search","undefined","category","catch","err","console","warn","getCategories","filteredArticles","filter","article","title","toLowerCase","includes","content","preview","slice","sort","a","b","Date","publishDate","getTime","startIndex","endIndex","paginatedArticles","length","hasNextPage","refresh","useArticle","articleId","_s2","setArticle","loadArticle","strapiArticle","getArticleBySlug","fallbackArticle","find","id"],"sources":["/Users/Parth/Laredo Car accident/laredo-car-accident/frontend/src/services/blogService.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useStrapiApi, BlogArticle } from './strapiApi';\nimport { fallbackArticles, fallbackCategories } from './fallbackData';\n\ninterface UseBlogDataOptions {\n  searchTerm?: string;\n  categoryFilter?: string;\n  page?: number;\n  pageSize?: number;\n  featured?: boolean;\n}\n\ninterface BlogDataResult {\n  articles: BlogArticle[];\n  categories: Array<{ key: string; label: string; color: string; icon: string }>;\n  loading: boolean;\n  error: string | null;\n  total: number;\n  hasNextPage: boolean;\n  refresh: () => void;\n}\n\nexport const useBlogData = (options: UseBlogDataOptions = {}): BlogDataResult => {\n  const {\n    searchTerm = '',\n    categoryFilter = 'all',\n    page = 1,\n    pageSize = 5,\n    featured\n  } = options;\n\n  const [articles, setArticles] = useState<BlogArticle[]>([]);\n  const [categories, setCategories] = useState(fallbackCategories);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [total, setTotal] = useState(0);\n  const [useFallback, setUseFallback] = useState(false);\n\n  const strapiApi = useStrapiApi();\n\n  const loadData = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Try to fetch from Strapi first\n      const [articlesResult, categoriesResult] = await Promise.all([\n        strapiApi.getArticles({\n          search: searchTerm || undefined,\n          category: categoryFilter !== 'all' ? categoryFilter : undefined,\n          featured,\n          page,\n          pageSize\n        }).catch(err => {\n          console.warn('Articles API failed:', err);\n          return { articles: [], total: 0, page: 1, pageSize: 10 };\n        }),\n        strapiApi.getCategories().catch(err => {\n          console.warn('Categories API failed:', err);\n          return fallbackCategories;\n        })\n      ]);\n\n      setArticles(articlesResult.articles);\n      setCategories(categoriesResult);\n      setTotal(articlesResult.total);\n      setUseFallback(false);\n    } catch (err) {\n      console.warn('Strapi API unavailable, using fallback data:', err);\n      \n      // Use fallback data\n      setUseFallback(true);\n      \n      let filteredArticles = [...fallbackArticles];\n\n      // Apply search filter\n      if (searchTerm) {\n        filteredArticles = filteredArticles.filter(article =>\n          article.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          article.content.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          article.preview.toLowerCase().includes(searchTerm.toLowerCase())\n        );\n      }\n\n      // Apply category filter\n      if (categoryFilter !== 'all') {\n        filteredArticles = filteredArticles.filter(article =>\n          article.category.toLowerCase() === categoryFilter.toLowerCase()\n        );\n      }\n\n      // Apply featured filter\n      if (featured !== undefined) {\n        // For fallback data, treat first 3 articles as featured\n        if (featured) {\n          filteredArticles = filteredArticles.slice(0, 3);\n        }\n      }\n\n      // Sort by publish date (newest first)\n      filteredArticles.sort((a, b) => \n        new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime()\n      );\n\n      // Apply pagination\n      const startIndex = (page - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const paginatedArticles = filteredArticles.slice(startIndex, endIndex);\n\n      setArticles(paginatedArticles);\n      setCategories(fallbackCategories);\n      setTotal(filteredArticles.length);\n      setError('Using offline data - Strapi CMS unavailable');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [searchTerm, categoryFilter, page, pageSize, featured]);\n\n  const hasNextPage = page * pageSize < total;\n\n  return {\n    articles,\n    categories,\n    loading,\n    error,\n    total,\n    hasNextPage,\n    refresh: loadData\n  };\n};\n\n// Hook for getting a single article by ID\nexport const useArticle = (articleId: string) => {\n  const [article, setArticle] = useState<BlogArticle | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const strapiApi = useStrapiApi();\n\n  useEffect(() => {\n    const loadArticle = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        // Try Strapi first\n        const strapiArticle = await strapiApi.getArticleBySlug(articleId);\n        if (strapiArticle) {\n          setArticle(strapiArticle);\n        } else {\n          // Fall back to local data\n          const fallbackArticle = fallbackArticles.find(a => a.id === articleId);\n          setArticle(fallbackArticle || null);\n        }\n      } catch (err) {\n        console.warn('Strapi API unavailable, using fallback data:', err);\n        const fallbackArticle = fallbackArticles.find(a => a.id === articleId);\n        setArticle(fallbackArticle || null);\n        setError('Using offline data - Strapi CMS unavailable');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (articleId) {\n      loadArticle();\n    }\n  }, [articleId]);\n\n  return { article, loading, error };\n};"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAqB,aAAa;AACvD,SAASC,gBAAgB,EAAEC,kBAAkB,QAAQ,gBAAgB;AAoBrE,OAAO,MAAMC,WAAW,GAAGA,CAACC,OAA2B,GAAG,CAAC,CAAC,KAAqB;EAAAC,EAAA;EAC/E,MAAM;IACJC,UAAU,GAAG,EAAE;IACfC,cAAc,GAAG,KAAK;IACtBC,IAAI,GAAG,CAAC;IACRC,QAAQ,GAAG,CAAC;IACZC;EACF,CAAC,GAAGN,OAAO;EAEX,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAgB,EAAE,CAAC;EAC3D,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAACI,kBAAkB,CAAC;EAChE,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMyB,SAAS,GAAGvB,YAAY,CAAC,CAAC;EAEhC,MAAMwB,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3BR,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAM,CAACO,cAAc,EAAEC,gBAAgB,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC3DL,SAAS,CAACM,WAAW,CAAC;QACpBC,MAAM,EAAExB,UAAU,IAAIyB,SAAS;QAC/BC,QAAQ,EAAEzB,cAAc,KAAK,KAAK,GAAGA,cAAc,GAAGwB,SAAS;QAC/DrB,QAAQ;QACRF,IAAI;QACJC;MACF,CAAC,CAAC,CAACwB,KAAK,CAACC,GAAG,IAAI;QACdC,OAAO,CAACC,IAAI,CAAC,sBAAsB,EAAEF,GAAG,CAAC;QACzC,OAAO;UAAEvB,QAAQ,EAAE,EAAE;UAAEQ,KAAK,EAAE,CAAC;UAAEX,IAAI,EAAE,CAAC;UAAEC,QAAQ,EAAE;QAAG,CAAC;MAC1D,CAAC,CAAC,EACFc,SAAS,CAACc,aAAa,CAAC,CAAC,CAACJ,KAAK,CAACC,GAAG,IAAI;QACrCC,OAAO,CAACC,IAAI,CAAC,wBAAwB,EAAEF,GAAG,CAAC;QAC3C,OAAOhC,kBAAkB;MAC3B,CAAC,CAAC,CACH,CAAC;MAEFU,WAAW,CAACa,cAAc,CAACd,QAAQ,CAAC;MACpCG,aAAa,CAACY,gBAAgB,CAAC;MAC/BN,QAAQ,CAACK,cAAc,CAACN,KAAK,CAAC;MAC9BG,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZC,OAAO,CAACC,IAAI,CAAC,8CAA8C,EAAEF,GAAG,CAAC;;MAEjE;MACAZ,cAAc,CAAC,IAAI,CAAC;MAEpB,IAAIgB,gBAAgB,GAAG,CAAC,GAAGrC,gBAAgB,CAAC;;MAE5C;MACA,IAAIK,UAAU,EAAE;QACdgC,gBAAgB,GAAGA,gBAAgB,CAACC,MAAM,CAACC,OAAO,IAChDA,OAAO,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACrC,UAAU,CAACoC,WAAW,CAAC,CAAC,CAAC,IAC9DF,OAAO,CAACI,OAAO,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACrC,UAAU,CAACoC,WAAW,CAAC,CAAC,CAAC,IAChEF,OAAO,CAACK,OAAO,CAACH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACrC,UAAU,CAACoC,WAAW,CAAC,CAAC,CACjE,CAAC;MACH;;MAEA;MACA,IAAInC,cAAc,KAAK,KAAK,EAAE;QAC5B+B,gBAAgB,GAAGA,gBAAgB,CAACC,MAAM,CAACC,OAAO,IAChDA,OAAO,CAACR,QAAQ,CAACU,WAAW,CAAC,CAAC,KAAKnC,cAAc,CAACmC,WAAW,CAAC,CAChE,CAAC;MACH;;MAEA;MACA,IAAIhC,QAAQ,KAAKqB,SAAS,EAAE;QAC1B;QACA,IAAIrB,QAAQ,EAAE;UACZ4B,gBAAgB,GAAGA,gBAAgB,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QACjD;MACF;;MAEA;MACAR,gBAAgB,CAACS,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACzB,IAAIC,IAAI,CAACD,CAAC,CAACE,WAAW,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAIF,IAAI,CAACF,CAAC,CAACG,WAAW,CAAC,CAACC,OAAO,CAAC,CACtE,CAAC;;MAED;MACA,MAAMC,UAAU,GAAG,CAAC7C,IAAI,GAAG,CAAC,IAAIC,QAAQ;MACxC,MAAM6C,QAAQ,GAAGD,UAAU,GAAG5C,QAAQ;MACtC,MAAM8C,iBAAiB,GAAGjB,gBAAgB,CAACQ,KAAK,CAACO,UAAU,EAAEC,QAAQ,CAAC;MAEtE1C,WAAW,CAAC2C,iBAAiB,CAAC;MAC9BzC,aAAa,CAACZ,kBAAkB,CAAC;MACjCkB,QAAQ,CAACkB,gBAAgB,CAACkB,MAAM,CAAC;MACjCtC,QAAQ,CAAC,6CAA6C,CAAC;IACzD,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACdyB,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAAClB,UAAU,EAAEC,cAAc,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAE1D,MAAM+C,WAAW,GAAGjD,IAAI,GAAGC,QAAQ,GAAGU,KAAK;EAE3C,OAAO;IACLR,QAAQ;IACRE,UAAU;IACVE,OAAO;IACPE,KAAK;IACLE,KAAK;IACLsC,WAAW;IACXC,OAAO,EAAElC;EACX,CAAC;AACH,CAAC;;AAED;AAAAnB,EAAA,CAjHaF,WAAW;EAAA,QAgBJH,YAAY;AAAA;AAkGhC,OAAO,MAAM2D,UAAU,GAAIC,SAAiB,IAAK;EAAAC,GAAA;EAC/C,MAAM,CAACrB,OAAO,EAAEsB,UAAU,CAAC,GAAGhE,QAAQ,CAAqB,IAAI,CAAC;EAChE,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMyB,SAAS,GAAGvB,YAAY,CAAC,CAAC;EAEhCD,SAAS,CAAC,MAAM;IACd,MAAMgE,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B/C,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF;QACA,MAAM8C,aAAa,GAAG,MAAMzC,SAAS,CAAC0C,gBAAgB,CAACL,SAAS,CAAC;QACjE,IAAII,aAAa,EAAE;UACjBF,UAAU,CAACE,aAAa,CAAC;QAC3B,CAAC,MAAM;UACL;UACA,MAAME,eAAe,GAAGjE,gBAAgB,CAACkE,IAAI,CAACnB,CAAC,IAAIA,CAAC,CAACoB,EAAE,KAAKR,SAAS,CAAC;UACtEE,UAAU,CAACI,eAAe,IAAI,IAAI,CAAC;QACrC;MACF,CAAC,CAAC,OAAOhC,GAAG,EAAE;QACZC,OAAO,CAACC,IAAI,CAAC,8CAA8C,EAAEF,GAAG,CAAC;QACjE,MAAMgC,eAAe,GAAGjE,gBAAgB,CAACkE,IAAI,CAACnB,CAAC,IAAIA,CAAC,CAACoB,EAAE,KAAKR,SAAS,CAAC;QACtEE,UAAU,CAACI,eAAe,IAAI,IAAI,CAAC;QACnChD,QAAQ,CAAC,6CAA6C,CAAC;MACzD,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED,IAAI4C,SAAS,EAAE;MACbG,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAACH,SAAS,CAAC,CAAC;EAEf,OAAO;IAAEpB,OAAO;IAAEzB,OAAO;IAAEE;EAAM,CAAC;AACpC,CAAC;AAAC4C,GAAA,CAtCWF,UAAU;EAAA,QAKH3D,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}