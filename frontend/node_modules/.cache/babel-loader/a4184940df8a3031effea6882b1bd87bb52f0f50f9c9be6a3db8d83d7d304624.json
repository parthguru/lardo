{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useTranslation } from 'react-i18next';\nconst STRAPI_BASE_URL = process.env.REACT_APP_STRAPI_URL || 'http://localhost:1337';\nclass StrapiApiService {\n  constructor() {\n    this.baseUrl = void 0;\n    this.baseUrl = STRAPI_BASE_URL;\n  }\n  async fetchFromStrapi(endpoint, params = {}) {\n    const searchParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        if (typeof value === 'object') {\n          searchParams.append(key, JSON.stringify(value));\n        } else {\n          searchParams.append(key, value.toString());\n        }\n      }\n    });\n    const url = `${this.baseUrl}/api/${endpoint}${searchParams.toString() ? `?${searchParams.toString()}` : ''}`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Strapi API Error:', error);\n      throw error;\n    }\n  }\n  async getArticles(params = {}) {\n    const {\n      locale = 'en',\n      search,\n      category,\n      featured,\n      page = 1,\n      pageSize = 10,\n      sort = 'publishDate:desc'\n    } = params;\n    try {\n      const response = await this.fetchFromStrapi('articles');\n      console.log('Strapi API Response:', response); // DEBUG\n\n      // Handle Strapi v5 direct array response format\n      let articles;\n      let pagination = {\n        total: 0,\n        page: 1,\n        pageSize: 10\n      };\n      if (Array.isArray(response)) {\n        // Direct array response (your current format)\n        articles = response.map(article => this.transformSimpleArticle(article)).filter(article => {\n          // Filter by publishDate instead of publishedAt\n          const publishDate = new Date(article.publishDate);\n          const now = new Date();\n          return publishDate <= now; // Only show articles with publishDate in the past\n        });\n\n        // Apply search filter\n        if (search) {\n          articles = articles.filter(article => article.title.toLowerCase().includes(search.toLowerCase()) || article.content.toLowerCase().includes(search.toLowerCase()) || article.preview.toLowerCase().includes(search.toLowerCase()));\n        }\n\n        // Apply category filter\n        if (category && category !== 'all') {\n          articles = articles.filter(article => article.category.toLowerCase() === category.toLowerCase());\n        }\n\n        // Apply featured filter\n        if (featured !== undefined) {\n          // For your format, treat articles with featured=true as featured\n          articles = articles.filter(article => {\n            // Since we don't have featured field in the simple format, skip this filter\n            return true;\n          });\n        }\n\n        // Sort by publishDate\n        articles.sort((a, b) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());\n\n        // Apply pagination\n        const startIndex = (page - 1) * pageSize;\n        const endIndex = startIndex + pageSize;\n        const paginatedArticles = articles.slice(startIndex, endIndex);\n        pagination = {\n          total: articles.length,\n          page,\n          pageSize\n        };\n        articles = paginatedArticles;\n      } else if (response.data && Array.isArray(response.data)) {\n        var _response$meta;\n        // Strapi v5 standard format with data array\n        articles = response.data.map(article => this.transformSimpleArticle(article));\n        pagination = ((_response$meta = response.meta) === null || _response$meta === void 0 ? void 0 : _response$meta.pagination) || pagination;\n      } else {\n        // Fallback\n        articles = [];\n      }\n      console.log('Transformed articles:', articles); // DEBUG\n\n      return {\n        articles,\n        total: pagination.total,\n        page: pagination.page,\n        pageSize: pagination.pageSize\n      };\n    } catch (error) {\n      console.error('Error fetching articles:', error);\n      return {\n        articles: [],\n        total: 0,\n        page: 1,\n        pageSize: 10\n      };\n    }\n  }\n  async getArticleBySlug(slug, locale = 'en') {\n    try {\n      const queryParams = {\n        locale,\n        status: 'published',\n        // Use Strapi v5 status parameter\n        filters: {\n          slug: {\n            $eq: slug\n          }\n        },\n        populate: {\n          category: true,\n          author: true,\n          tags: true,\n          localizations: true\n        }\n      };\n      const response = await this.fetchFromStrapi('articles', queryParams);\n      if (response.data && response.data.length > 0) {\n        return this.transformArticle(response.data[0]);\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching article by slug:', error);\n      return null;\n    }\n  }\n  async getCategories(locale = 'en') {\n    try {\n      // Simplified API call without complex parameters to avoid 500 error\n      const response = await this.fetchFromStrapi('categories');\n      console.log('Categories API Response:', response); // DEBUG\n\n      // Handle empty categories or different response formats\n      const categoriesData = response.data || response || [];\n      const categories = categoriesData.map(category => {\n        var _category$attributes, _category$attributes2, _category$attributes3, _category$attributes4;\n        return {\n          key: ((_category$attributes = category.attributes) === null || _category$attributes === void 0 ? void 0 : _category$attributes.slug) || category.slug || 'category-' + category.id,\n          label: ((_category$attributes2 = category.attributes) === null || _category$attributes2 === void 0 ? void 0 : _category$attributes2.name) || category.name || 'Category',\n          color: ((_category$attributes3 = category.attributes) === null || _category$attributes3 === void 0 ? void 0 : _category$attributes3.color) || category.color || '#666',\n          icon: ((_category$attributes4 = category.attributes) === null || _category$attributes4 === void 0 ? void 0 : _category$attributes4.icon) || category.icon || '📂'\n        };\n      });\n\n      // Return fallback categories since your Strapi doesn't have categories set up yet\n      return [{\n        key: 'all',\n        label: 'All Categories',\n        color: '#666',\n        icon: '📚'\n      }, {\n        key: 'treatment',\n        label: 'Treatment',\n        color: '#2C5AA0',\n        icon: '🏥'\n      }, {\n        key: 'legal',\n        label: 'Legal',\n        color: '#059669',\n        icon: '⚖️'\n      }, {\n        key: 'recovery',\n        label: 'Recovery',\n        color: '#DC2626',\n        icon: '💪'\n      }, ...categories];\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      // Return fallback categories on error\n      return [{\n        key: 'all',\n        label: 'All Categories',\n        color: '#666',\n        icon: '📚'\n      }, {\n        key: 'treatment',\n        label: 'Treatment',\n        color: '#2C5AA0',\n        icon: '🏥'\n      }, {\n        key: 'legal',\n        label: 'Legal',\n        color: '#059669',\n        icon: '⚖️'\n      }, {\n        key: 'recovery',\n        label: 'Recovery',\n        color: '#DC2626',\n        icon: '💪'\n      }];\n    }\n  }\n  async getFeaturedArticles(locale = 'en', limit = 5) {\n    const result = await this.getArticles({\n      locale,\n      featured: true,\n      pageSize: limit,\n      sort: 'publishDate:desc'\n    });\n    return result.articles;\n  }\n  transformArticle(strapiArticle) {\n    var _attributes$category, _attributes$category$, _attributes$category$2, _attributes$author, _attributes$author$da, _attributes$author$da2, _attributes$tags, _attributes$tags$data;\n    const {\n      attributes\n    } = strapiArticle;\n    return {\n      id: strapiArticle.id.toString(),\n      category: ((_attributes$category = attributes.category) === null || _attributes$category === void 0 ? void 0 : (_attributes$category$ = _attributes$category.data) === null || _attributes$category$ === void 0 ? void 0 : (_attributes$category$2 = _attributes$category$.attributes) === null || _attributes$category$2 === void 0 ? void 0 : _attributes$category$2.name) || 'Uncategorized',\n      title: attributes.title,\n      preview: attributes.excerpt,\n      content: attributes.content,\n      readingTime: attributes.readingTime,\n      publishDate: attributes.publishDate,\n      author: (_attributes$author = attributes.author) === null || _attributes$author === void 0 ? void 0 : (_attributes$author$da = _attributes$author.data) === null || _attributes$author$da === void 0 ? void 0 : (_attributes$author$da2 = _attributes$author$da.attributes) === null || _attributes$author$da2 === void 0 ? void 0 : _attributes$author$da2.name,\n      tags: ((_attributes$tags = attributes.tags) === null || _attributes$tags === void 0 ? void 0 : (_attributes$tags$data = _attributes$tags.data) === null || _attributes$tags$data === void 0 ? void 0 : _attributes$tags$data.map(tag => tag.attributes.name)) || [],\n      seo: {\n        title: attributes.seoTitle,\n        description: attributes.seoDescription,\n        keywords: attributes.seoKeywords\n      }\n    };\n  }\n  transformSimpleArticle(article) {\n    return {\n      id: article.id.toString(),\n      category: article.category || 'Uncategorized',\n      title: article.title,\n      preview: article.excerpt,\n      content: article.content,\n      readingTime: article.readingTime || 1,\n      publishDate: article.publishDate,\n      author: article.author,\n      tags: article.tags || [],\n      seo: {\n        title: article.seoTitle,\n        description: article.seoDescription,\n        keywords: article.seoKeywords\n      }\n    };\n  }\n}\n\n// Create a singleton instance\nexport const strapiApi = new StrapiApiService();\n\n// Hook for using Strapi API with current locale\nexport const useStrapiApi = () => {\n  _s();\n  const {\n    i18n\n  } = useTranslation();\n  const currentLocale = i18n.language === 'es' ? 'es' : 'en';\n  return {\n    getArticles: (params = {}) => strapiApi.getArticles({\n      ...params,\n      locale: currentLocale\n    }),\n    getArticleBySlug: slug => strapiApi.getArticleBySlug(slug, currentLocale),\n    getCategories: () => strapiApi.getCategories(currentLocale),\n    getFeaturedArticles: limit => strapiApi.getFeaturedArticles(currentLocale, limit)\n  };\n};\n_s(useStrapiApi, \"iD7vDB/EPQWin5ATG71yacngHuk=\", false, function () {\n  return [useTranslation];\n});","map":{"version":3,"names":["useTranslation","STRAPI_BASE_URL","process","env","REACT_APP_STRAPI_URL","StrapiApiService","constructor","baseUrl","fetchFromStrapi","endpoint","params","searchParams","URLSearchParams","Object","entries","forEach","key","value","undefined","append","JSON","stringify","toString","url","response","fetch","ok","Error","status","json","error","console","getArticles","locale","search","category","featured","page","pageSize","sort","log","articles","pagination","total","Array","isArray","map","article","transformSimpleArticle","filter","publishDate","Date","now","title","toLowerCase","includes","content","preview","a","b","getTime","startIndex","endIndex","paginatedArticles","slice","length","data","_response$meta","meta","getArticleBySlug","slug","queryParams","filters","$eq","populate","author","tags","localizations","transformArticle","getCategories","categoriesData","categories","_category$attributes","_category$attributes2","_category$attributes3","_category$attributes4","attributes","id","label","name","color","icon","getFeaturedArticles","limit","result","strapiArticle","_attributes$category","_attributes$category$","_attributes$category$2","_attributes$author","_attributes$author$da","_attributes$author$da2","_attributes$tags","_attributes$tags$data","excerpt","readingTime","tag","seo","seoTitle","description","seoDescription","keywords","seoKeywords","strapiApi","useStrapiApi","_s","i18n","currentLocale","language"],"sources":["/Users/Parth/Laredo Car accident/laredo-car-accident/frontend/src/services/strapiApi.ts"],"sourcesContent":["import { useTranslation } from 'react-i18next';\n\nconst STRAPI_BASE_URL = process.env.REACT_APP_STRAPI_URL || 'http://localhost:1337';\n\nexport interface StrapiArticle {\n  id: number;\n  attributes: {\n    title: string;\n    slug: string;\n    content: string;\n    excerpt: string;\n    readingTime: number;\n    featured: boolean;\n    publishDate: string;\n    category: {\n      data: {\n        id: number;\n        attributes: {\n          name: string;\n          slug: string;\n          color: string;\n          icon: string;\n        };\n      };\n    };\n    author: {\n      data: {\n        id: number;\n        attributes: {\n          name: string;\n          credentials: string;\n          specialty: string;\n          bio: string;\n        };\n      };\n    };\n    tags: {\n      data: Array<{\n        id: number;\n        attributes: {\n          name: string;\n          slug: string;\n        };\n      }>;\n    };\n    seoTitle?: string;\n    seoDescription?: string;\n    seoKeywords?: string;\n    locale: string;\n    localizations: {\n      data: Array<{\n        id: number;\n        attributes: {\n          locale: string;\n        };\n      }>;\n    };\n  };\n}\n\nexport interface StrapiCategory {\n  id: number;\n  attributes: {\n    name: string;\n    slug: string;\n    description?: string;\n    color: string;\n    icon: string;\n    displayOrder: number;\n    locale: string;\n  };\n}\n\nexport interface StrapiAuthor {\n  id: number;\n  attributes: {\n    name: string;\n    credentials: string;\n    specialty: string;\n    bio: string;\n    languages: string[];\n    locale: string;\n  };\n}\n\nexport interface BlogArticle {\n  id: string;\n  category: string;\n  title: string;\n  preview: string;\n  content: string;\n  readingTime: number;\n  publishDate: string;\n  author?: string;\n  tags?: string[];\n  seo?: {\n    title?: string;\n    description?: string;\n    keywords?: string;\n  };\n}\n\nclass StrapiApiService {\n  private baseUrl: string;\n\n  constructor() {\n    this.baseUrl = STRAPI_BASE_URL;\n  }\n\n  private async fetchFromStrapi(endpoint: string, params: Record<string, any> = {}) {\n    const searchParams = new URLSearchParams();\n    \n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        if (typeof value === 'object') {\n          searchParams.append(key, JSON.stringify(value));\n        } else {\n          searchParams.append(key, value.toString());\n        }\n      }\n    });\n\n    const url = `${this.baseUrl}/api/${endpoint}${searchParams.toString() ? `?${searchParams.toString()}` : ''}`;\n    \n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Strapi API Error:', error);\n      throw error;\n    }\n  }\n\n  async getArticles(params: {\n    locale?: string;\n    search?: string;\n    category?: string;\n    featured?: boolean;\n    page?: number;\n    pageSize?: number;\n    sort?: string;\n  } = {}): Promise<{ articles: BlogArticle[]; total: number; page: number; pageSize: number }> {\n    const {\n      locale = 'en',\n      search,\n      category,\n      featured,\n      page = 1,\n      pageSize = 10,\n      sort = 'publishDate:desc'\n    } = params;\n\n    try {\n      const response = await this.fetchFromStrapi('articles');\n      console.log('Strapi API Response:', response); // DEBUG\n      \n      // Handle Strapi v5 direct array response format\n      let articles: BlogArticle[];\n      let pagination = { total: 0, page: 1, pageSize: 10 };\n      \n      if (Array.isArray(response)) {\n        // Direct array response (your current format)\n        articles = response\n          .map(article => this.transformSimpleArticle(article))\n          .filter(article => {\n            // Filter by publishDate instead of publishedAt\n            const publishDate = new Date(article.publishDate);\n            const now = new Date();\n            return publishDate <= now; // Only show articles with publishDate in the past\n          });\n        \n        // Apply search filter\n        if (search) {\n          articles = articles.filter(article =>\n            article.title.toLowerCase().includes(search.toLowerCase()) ||\n            article.content.toLowerCase().includes(search.toLowerCase()) ||\n            article.preview.toLowerCase().includes(search.toLowerCase())\n          );\n        }\n\n        // Apply category filter\n        if (category && category !== 'all') {\n          articles = articles.filter(article =>\n            article.category.toLowerCase() === category.toLowerCase()\n          );\n        }\n\n        // Apply featured filter\n        if (featured !== undefined) {\n          // For your format, treat articles with featured=true as featured\n          articles = articles.filter(article => {\n            // Since we don't have featured field in the simple format, skip this filter\n            return true;\n          });\n        }\n\n        // Sort by publishDate\n        articles.sort((a, b) => \n          new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime()\n        );\n\n        // Apply pagination\n        const startIndex = (page - 1) * pageSize;\n        const endIndex = startIndex + pageSize;\n        const paginatedArticles = articles.slice(startIndex, endIndex);\n        \n        pagination = { total: articles.length, page, pageSize };\n        articles = paginatedArticles;\n      } else if (response.data && Array.isArray(response.data)) {\n        // Strapi v5 standard format with data array\n        articles = response.data.map((article: any) => this.transformSimpleArticle(article));\n        pagination = response.meta?.pagination || pagination;\n      } else {\n        // Fallback\n        articles = [];\n      }\n      \n      console.log('Transformed articles:', articles); // DEBUG\n      \n      return {\n        articles,\n        total: pagination.total,\n        page: pagination.page,\n        pageSize: pagination.pageSize\n      };\n    } catch (error) {\n      console.error('Error fetching articles:', error);\n      return { articles: [], total: 0, page: 1, pageSize: 10 };\n    }\n  }\n\n  async getArticleBySlug(slug: string, locale: string = 'en'): Promise<BlogArticle | null> {\n    try {\n      const queryParams = {\n        locale,\n        status: 'published', // Use Strapi v5 status parameter\n        filters: {\n          slug: { $eq: slug }\n        },\n        populate: {\n          category: true,\n          author: true,\n          tags: true,\n          localizations: true\n        }\n      };\n\n      const response = await this.fetchFromStrapi('articles', queryParams);\n      \n      if (response.data && response.data.length > 0) {\n        return this.transformArticle(response.data[0]);\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error fetching article by slug:', error);\n      return null;\n    }\n  }\n\n  async getCategories(locale: string = 'en'): Promise<{ key: string; label: string; color: string; icon: string }[]> {\n    try {\n      // Simplified API call without complex parameters to avoid 500 error\n      const response = await this.fetchFromStrapi('categories');\n      console.log('Categories API Response:', response); // DEBUG\n      \n      // Handle empty categories or different response formats\n      const categoriesData = response.data || response || [];\n      const categories = categoriesData.map((category: any) => ({\n        key: category.attributes?.slug || category.slug || 'category-' + category.id,\n        label: category.attributes?.name || category.name || 'Category',\n        color: category.attributes?.color || category.color || '#666',\n        icon: category.attributes?.icon || category.icon || '📂'\n      }));\n\n      // Return fallback categories since your Strapi doesn't have categories set up yet\n      return [\n        { key: 'all', label: 'All Categories', color: '#666', icon: '📚' },\n        { key: 'treatment', label: 'Treatment', color: '#2C5AA0', icon: '🏥' },\n        { key: 'legal', label: 'Legal', color: '#059669', icon: '⚖️' },\n        { key: 'recovery', label: 'Recovery', color: '#DC2626', icon: '💪' },\n        ...categories\n      ];\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      // Return fallback categories on error\n      return [\n        { key: 'all', label: 'All Categories', color: '#666', icon: '📚' },\n        { key: 'treatment', label: 'Treatment', color: '#2C5AA0', icon: '🏥' },\n        { key: 'legal', label: 'Legal', color: '#059669', icon: '⚖️' },\n        { key: 'recovery', label: 'Recovery', color: '#DC2626', icon: '💪' }\n      ];\n    }\n  }\n\n  async getFeaturedArticles(locale: string = 'en', limit: number = 5): Promise<BlogArticle[]> {\n    const result = await this.getArticles({\n      locale,\n      featured: true,\n      pageSize: limit,\n      sort: 'publishDate:desc'\n    });\n    \n    return result.articles;\n  }\n\n  private transformArticle(strapiArticle: StrapiArticle): BlogArticle {\n    const { attributes } = strapiArticle;\n    \n    return {\n      id: strapiArticle.id.toString(),\n      category: attributes.category?.data?.attributes?.name || 'Uncategorized',\n      title: attributes.title,\n      preview: attributes.excerpt,\n      content: attributes.content,\n      readingTime: attributes.readingTime,\n      publishDate: attributes.publishDate,\n      author: attributes.author?.data?.attributes?.name,\n      tags: attributes.tags?.data?.map(tag => tag.attributes.name) || [],\n      seo: {\n        title: attributes.seoTitle,\n        description: attributes.seoDescription,\n        keywords: attributes.seoKeywords\n      }\n    };\n  }\n\n  private transformSimpleArticle(article: any): BlogArticle {\n    return {\n      id: article.id.toString(),\n      category: article.category || 'Uncategorized',\n      title: article.title,\n      preview: article.excerpt,\n      content: article.content,\n      readingTime: article.readingTime || 1,\n      publishDate: article.publishDate,\n      author: article.author,\n      tags: article.tags || [],\n      seo: {\n        title: article.seoTitle,\n        description: article.seoDescription,\n        keywords: article.seoKeywords\n      }\n    };\n  }\n}\n\n// Create a singleton instance\nexport const strapiApi = new StrapiApiService();\n\n// Hook for using Strapi API with current locale\nexport const useStrapiApi = () => {\n  const { i18n } = useTranslation();\n  const currentLocale = i18n.language === 'es' ? 'es' : 'en';\n\n  return {\n    getArticles: (params = {}) => strapiApi.getArticles({ ...params, locale: currentLocale }),\n    getArticleBySlug: (slug: string) => strapiApi.getArticleBySlug(slug, currentLocale),\n    getCategories: () => strapiApi.getCategories(currentLocale),\n    getFeaturedArticles: (limit?: number) => strapiApi.getFeaturedArticles(currentLocale, limit),\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}